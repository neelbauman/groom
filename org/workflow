GROOM -*- mode:org; -*-

** 目標
*** このファイルでは
ファイル構成とそれらを使ったワークフローを定義する。

*** 実現したい管理
+ orgの簡単な設定とコマンドのみで操作する
  + lispはできるだけ書かない
+ 平日や休日など、複数の異なるアジェンダを一貫性を保って管理する
  + S式は使わず、Orgのタイムスタンプのみで構成する
+ どのブランチからでもhabitなどの履歴がconsistentに反映されている

** ディレクトリ構成
基本的な構造は以下の通り

~/agenda
|__ script.org
|__ habit.org
|__ routine.org
|__ todo.org
|__ .git
|__ .gitignore

** gitとの連携
gitの役割は主に2つ
1. weekday, holiday, SS, AWなどの雛形をいくつか作っておくこと。
2. 最低でも、yesterday, today, tomorrowのブランチを作っておく。

** 通常業務
todo.org以外のファイルアイテムの編集はせずにtimestampとLOGのみが変更される場合。
todo.org以外のファイルは直接編集されず、agenda viewのコマンドから変更が加えられる。
*
*** フロー
# 業務開始
その日が属するカテゴリのブランチからtodayブランチをチェックアウトする
todo.orgを編集する

# 仕事開始
# この間、agenda-viewからorg-agenda-filesのtimestampとLOGが変更される。
# 仕事終了

todayブランチをコミットする

# 業務終了（以後、翌日の業務開始までorg-agenda-filesは編集されない）
todayをyesterdayにチェックアウトする。
todayを親ブランチにマージする。
todayを削除する。


** キックアップ
新しいカテゴリを作る場合。
script,habit,routineなどが編集され、新しいアジェンダが作られる。

やり方はいくつかある
1. 特別な期間のために、適当な親カテゴリからサブカテゴリを作る
   + 親ブランチのヒストリを受け継ぐ
   + サブカテゴリのヒストリはどうするか？
1. 既存の複数のカテゴリにまたがるようなカテゴリを作る
   + 

**Q.どのようにしてヒストリの一貫性を保つか？**

問題：夏休みのために、holidayブランチからsummer-holidayブランチをチェックアウトした。
holidayのhabitの一部分はsummer-holidayでも変わらないが、
別の一部はsummer-holidayでは時間が変わったり内容が変わったり、あるいは実施されなかったりする。

夏休みが終わって、通常のholidayブランチに戻ったとき、
holidayブランチはsummer-holidayブランチで活動をしている期間の記憶がない。
したがってsummer-holidayブランチでの記憶を取り込みたいが、

+ summer-holidayでも変わらなかった部分のLOGは取り込みたい。
+ summer-holidayに特有の事柄については取り込みたくない。
+ summer-holidayで時間や内容に多少の変更はあったものの、
本質的にはholidayのものと同一であるもののLOGは取り込み、項目の変更は取り込みたくない


+ 過剰にブランチが増えてストレージを圧迫したり動作が遅くなるのは避けたい。
  + 残すもの、アーカイブするもの、削除するものの柔軟な選択と決定


** どうやって解決するか？

カテゴリごとに異なるscript, habit, routineがある。
このカテゴリは抽象的で、その区分は複雑である。
カテゴリごとにファイルを作成して
大量のorg-agenda-filesを作ったり、
org-agenda-filesを出し入れしたり、
でこの分類を扱うのは適切ではなく、
gitでバージョン管理をするのが妥当だと言える。


問題は、カテゴリが切り替わって次にそのカテゴリからtodayをチェックアウトしたとき、
もともとのカテゴリでは日付が進んでいないということ。

空白の期間取り扱われなかったhabitの日付を自動で進める必要がある。

どのhabitが取り扱われているかをタグで検索？->どのhabitが取り扱われていないかがわかる

原則的に、git側で単一ファイル内の編集でマージするものとしないものを区別して扱うことはできない。


+ gitattributeを利用する
+ 別ファイルを用意する
+ タグ検索を利用する
+ org-agenda-filesを切り替える

*** フロー


